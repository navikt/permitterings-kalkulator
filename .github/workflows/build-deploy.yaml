name: Bygg alle brancher. Deploy master branch

on: [push]

env:
  APP_IMAGE: ghcr.io/${{ github.repository }}:${{ github.sha }}

jobs:
  compile-test-and-build:
    name: Build and run tests
    runs-on: ubuntu-latest
    steps:
      - name: Sjekk ut kode
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn-avhengigheter
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Installer avhengigheter (yarn ci)
        run: |
          yarn install --frozen-lockfile

      - name: Enhetstesting av applikasjon
        run: yarn test-ci

      - name: Bygg (yarn run build)
        run: yarn run build

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to ghcr.io
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_PUSH_USERNAME }}
          password: ${{ secrets.GHCR_PUSH_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.APP_IMAGE }} 
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Sett miljøvariabel COMMIT
        run: echo "COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV

  deploy-to-dev-sbs:
      name: Deploy to dev-sbs
      # Redigér her hvis du vil deploye en branch til dev. F.eks. slik:
      # if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/<navn-på-branch>'
      if: github.ref == 'refs/heads/master'
      needs: compile-test-and-build
      runs-on: ubuntu-latest
      steps:
          - uses: actions/checkout@v2
          - uses: nais/deploy/actions/deploy@v1
            env:
                APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
                CLUSTER: dev-sbs
                RESOURCE: nais/nais.yaml
                PRINT_PAYLOAD: true
                VARS: nais/dev-env.yaml
                IMAGE: ${{ env.APP_IMAGE }}
                REF: ${{ env.COMMIT }}

  deploy-to-prod-sbs:
      name: Deploy to prod-sbs
      if: github.ref == 'refs/heads/master'
      needs: compile-test-and-build
      runs-on: ubuntu-latest
      steps:
          - uses: actions/checkout@v2
          - uses: nais/deploy/actions/deploy@v1
            env:
                APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
                CLUSTER: prod-sbs
                RESOURCE: nais/nais.yaml
                PRINT_PAYLOAD: true
                VARS: nais/prod-env.yaml
                IMAGE: ${{ env.APP_IMAGE }}
                REF: ${{ env.COMMIT }}

